# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy in internalweb

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
          include-prerelease: true

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy:
    runs-on: ubuntu-latest
    needs: build   
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: .net-app
          path: myapp
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Zip up the app
        run: | 
          cd myapp
          zip -r ../myapp.zip .
      - name: Upload the zip to Azure
        uses: azure/CLI@v1
        with:
          azcliversion: 2.33.1
          inlineScript: |
            az storage blob upload --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} --container-name packages --name dotnetapp.zip --file myapp.zip
      - name: Get date after 30 minutes
        id: date
        run: |          
          date -d "30 minutes" +%Y-%m-%dT%H:%MZ
          echo "::set-output name=date::$(date -d "30 minutes" +%Y-%m-%dT%H:%MZ)"
      - name: Azure CLI script
        id: deployment
        uses: azure/CLI@v1
        with:
          azcliversion: 2.33.1
          inlineScript: |
            STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP }} --query "[0].value" --output tsv)            
            SAS=$(az storage account generate-sas --permissions rl --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} --account-key $STORAGE_ACCOUNT_KEY --services b --resource-types co --expiry ${{ steps.date.outputs.date }} -o tsv)
            ZIP_URL="https://${{ secrets.STORAGE_ACCOUNT_NAME }}.blob.core.windows.net/packages/dotnetapp.zip?$SAS"
            SUBSCRIPTION_ID=$(az account show --query id --output tsv)
            SITE_URI="https://management.azure.com/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${{ secrets.RESOURCE_GROUP }}/providers/Microsoft.Web/sites/${{ secrets.WEBAPP_NAME }}/extensions/onedeploy?api-version=2020-12-01"
            az rest --method PUT \
            --uri $SITE_URI \
            --body '{ 
               "properties": { 
                "packageUri": "'"${ZIP_URL}"'",                
                "type": "zip", 
                "ignorestack": false,
                "clean": true,
                "restart": false
              }
            }'
            echo "::set-output name=deployment::$SITE_URI"
      - name: Check if the deployment success
        uses: azure/CLI@v1
        with:
          azcliversion: 2.33.1
          inlineScript: |
            echo "Install jq"
            apk add jq

            while true; do
              STATUS=$(az rest --method GET --uri ${{ steps.deployment.outputs.deployment }} | jq '.value[0].properties.provisioningState')
              echo $STATUS
              if [ "$STATUS" = "Succeeded" ]; then
                  echo "Deployment succeeded"
                  break
              else
                echo "Deployment state: $STATUS..."
                sleep 5
              fi
            done
